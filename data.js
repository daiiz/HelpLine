var data = 
{
  "codes": [],
  "defs": [
    "$ ファイル「(#{files})」の編集履歴を完全に(#{delete})がワーキングツリーは残す {8}",
    "% git filter-branch -f --index-filter 'git rm --cached --ignore-unmatch #{$1}' HEAD {8}",
    "$ ファイル「(#{files})」の編集履歴を完全に(#{delete}) {8}",
    "% git filter-branch -f --index-filter 'git rm --ignore-unmatch #{$1}' HEAD {8}",
    "$ 編集履歴をGitHubに反映させる {8}",
    "% git push origin --force --all {8}",
    "$ ファイル「(#{files})」の(#{numbers})分前からの(#{change})履歴を(#{display}) {10}",
    "% git log --since \"#{$2} minutes ago\" #{$1} {10}",
    "$ (#{numbers})分前からのファイル「(#{files})」の(#{change})履歴を(#{display}) {10}",
    "% git log --since \"#{$1} minutes ago\" #{$2} {10}",
    "$ ファイル「(#{files})」の(#{numbers})分前からの(#{change})を(#{display}) {10}",
    "% git diff HEAD \"@{#{$2} minutes ago}\" #{$1} {10}",
    "$ (#{numbers})分前からのファイル「(#{files})」の(#{change})を(#{display}) {10}",
    "% git diff HEAD \"@{#{$1} minutes ago}\" #{$2} {10}",
    "$ ファイル「(#{files})」の(#{numbers})時間前からの(#{change})履歴を(#{display}) {10}",
    "% git log --since \"#{$2} hours ago\" #{$1} {10}",
    "$ (#{numbers})時間前からのファイル「(#{files})」の(#{change})履歴を(#{display}) {10}",
    "% git log --since \"#{$1} hours ago\" #{$2} {10}",
    "$ ファイル「(#{files})」の(#{numbers})時間前からの(#{change})を(#{display}) {10}",
    "% git diff HEAD \"@{#{$2} hours ago}\" #{$1} {10}",
    "$ (#{numbers})時間前からのファイル「(#{files})」の(#{change})を(#{display}) {10}",
    "% git diff HEAD \"@{#{$1} hours ago}\" #{$2} {10}",
    "$ ファイル「(#{files})」の(#{numbers})日前からの(#{change})履歴を(#{display}) {10}",
    "% git log --since \"#{$2} days ago\" #{$1} {10}",
    "$ (#{numbers})日前からのファイル「(#{files})」の(#{change})履歴を(#{display}) {10}",
    "% git log --since \"#{$1} days ago\" #{$2} {10}",
    "$ ファイル「(#{files})」の(#{numbers})日前からの(#{change})を(#{display}) {10}",
    "% git diff HEAD \"@{#{$2} days ago}\" #{$1} {10}",
    "$ (#{numbers})日前からのファイル「(#{files})」の(#{change})を(#{display}) {10}",
    "% git diff HEAD \"@{#{$1} days ago}\" #{$2} {10}",
    "$ ファイルを新しい順に(リスト|表示)する {11}",
    "% git ls-files | xargs ls -l -t {11}",
    "$ Compare file xxxx with the one from 2 days ago {12}",
    "$ xxxxというファイルを2日前のものと比較する {12}",
    "$ 2日前のxxxxというファイルを現在のものと比較する {12}",
    "% git diff HEAD '@{2 days ago}' xxxx {12}",
    "$ Compare (#{files}) with the one from (#{numbers}) minutes ago {12}",
    "$ 「(#{files})」ファイルを(#{numbers})分前の(もの|バージョン)と比較する {12}",
    "$ 「(#{files})」ファイルが(#{numbers})分前から(変化した|変わった)ところを(#{display}) {12}",
    "% git diff HEAD '@{#{$2} minutes ago}' #{$1} {12}",
    "$ (#{numbers})分前の「(#{files})」ファイルと現在の(もの|バージョン)を比較する {12}",
    "% git diff HEAD '@{#{$1} minutes ago}' #{$2} {12}",
    "$ (#{numbers})日前の「(#{files})」ファイルと現在のものを(比較する|比べる) {12}",
    "% git diff HEAD '@{#{$1} days ago}' #{$2} {12}",
    "$ 現在の「(#{files})」ファイルを(#{numbers})日前のものを(比較する|比べる) {12}",
    "% git diff HEAD '@{#{$2} days ago}' #{$1} {12}",
    "$ (1つ|ひとつ)前のバージョンの(#{files})と比較 {12}",
    "$ (1つ|ひとつ)前のバージョンの(#{files})からの変更点 {12}",
    "% git diff $(git rev-list -n 1 HEAD -- #{$2})^ -- #{$2} {12}",
    "$ (#{files})を(1つ|ひとつ)前のバージョンと比較 {12}",
    "$ (#{files})の(1つ|ひとつ)前のバージョンからの変更点 {12}",
    "% git diff $(git rev-list -n 1 HEAD -- #{$1})^ -- #{$1} {12}",
    "$ (#{files})の最新版の変更点を(#{display}) {12}",
    "$ 最新の(#{files})の変更個所は? {12}",
    "$ (#{files})は最後にどこを変えた? {12}",
    "$ (#{files})の(一番新しい|最新の)変更は? {12}",
    "% git diff $(git rev-list -n 1 HEAD -- #{$1})^ -- #{$1} {12}",
    "$ (2つ|ふたつ)前のバージョンの(#{files})と比較 {12}",
    "$ (2つ|ふたつ)前のバージョンの(#{files})からの変更点を(#{display}) {12}",
    "% git diff $(git rev-list -n 1 HEAD -- #{$2})^^ -- #{$2} {12}",
    "$ (#{files})を(2つ|ふたつ)前のバージョンと比較 {12}",
    "$ (#{files})の(2つ|ふたつ)前のバージョンのからの変更点を(#{display}) {12}",
    "% git diff $(git rev-list -n 1 HEAD -- #{$1})^^ -- #{$1} {12}",
    "$ ブランチのリストを更新日時順に表示する {13}",
    "% git branch --sort=committerdate {13}",
    "$ ファイルを大きい順に表示する {14}",
    "% git ls-files | xargs du -s | sort -r -n {14}",
    "$ 直前のコミットを取り消す {16}",
    "% git reset --soft HEAD^ {16}",
    "$ ひとつ前のコミットの状態に完全に戻す {16}",
    "% git reset --hard HEAD^ {16}",
    "$ コミット後の変更を全部消す {16}",
    "% git reset --hard HEAD {16}",
    "$ すごい昔の状態で動作を確認したい {16}",
    "% git reset --hard 昔のコミットのハッシュ値 {16}",
    "$ 直前のリセットをなかったことにする {16}",
    "% git reset --hard ORIG_HEAD {16}",
    "$ 過去のあらゆる操作履歴を見る {17}",
    "% git reflog {17}",
    "$ 過去のコミット履歴を見る {17}",
    "% git log {17}",
    "$ ブランチ(のリスト)?を(#{display}) {20}",
    "% git branch {20}",
    "$ (#{params})というブランチを作成する {20}",
    "% git branch #{$1} {20}",
    "$ (#{branches})というブランチを(#{delete}) {20}",
    "% git branch -d #{$1} {20}",
    "$ 現在の編集状態を(#{display}) {23}",
    "$ 編集中のファイルを(#{display}) {23}",
    "% git status {23}",
    "$ (#{numbers})個前までのコミットをまとめる {27}",
    "% git rebase -i HEAD~#{$1} {27}",
    "$ ひとつ前の「(#{files})」ファイルを(#{display}) {29}",
    "$ 1バージョン前の「(#{files})」ファイルを(#{display}) {29}",
    "% git show HEAD~:#{$1} {29}",
    "$ ふたつ前の「(#{files})」ファイルを(#{display}) {29}",
    "$ 2バージョン前の「(#{files})」ファイルを(#{display}) {29}",
    "% git show HEAD~~:#{$1} {29}",
    "$ (#{numbers})個前の「(#{files})」ファイルを(#{display}) {29}",
    "$ (#{numbers})バージョン前の「(#{files})」ファイルを(#{display}) {29}",
    "% git show HEAD~#{$1}:#{$2} {29}",
    "$ (#{numbers})分前の「(#{files})」ファイルを(#{display}) {29}",
    "% git show '@{#{$1} minutes ago}':#{$2} {29}",
    "$ (#{numbers})時間前の「(#{files})」ファイルを(#{display}) {29}",
    "% git show '@{#{$1} hours ago}':#{$2} {29}",
    "$ (#{numbers})日前の「(#{files})」ファイルを(#{display}) {29}",
    "% git show '@{#{$1} days ago}':#{$2} {29}",
    "$ 昨日の「(#{files})」ファイルを(#{display}) {29}",
    "% git show @{yesterday}:#{$1} {29}",
    "$ (#{numbers})分前(から|以降に)(#{modified})ファイルをリストする {30}",
    "% git diff --name-only '@{#{$1} minutes ago}' {30}",
    "$ (#{numbers})時間前(から|以降に)(#{modified})ファイルをリストする {30}",
    "% git diff --name-only '@{#{$1} hours ago}' {30}",
    "$ (#{numbers})日前(から|以降に)(#{modified})ファイルをリストする {30}",
    "% git diff --name-only '@{#{$1} days ago}' {30}",
    "$ (#{numbers})日前からの変更を(#{display}) {30}",
    "% git log --stat --since=\"#{$1} days ago\" {30}",
    "$ 編集中のファイルをリストする {31}",
    "% git ls-files -m {31}",
    "$ (#{params})という文字列がはじめて出現した(バージョン|コミット)の情報を(#{display}) {32}",
    "% git log -1 `git rev-list --all | xargs git grep '#{$1}' | tail -1 | ruby -e \"STDIN.each {|line| puts line[0..39] }\"` {32}",
    "$ (#{params})という文字列がはじめて出現した(バージョン|コミット)に一時的に戻す {32}",
    "% git checkout `git rev-list --all | xargs git grep '#{$1}' | tail -1 | ruby -e \"STDIN.each {|line| puts line[0..39] }\"` {32}",
    "$ (#{numbers})個前のバージョンに一時的に戻す {33}",
    "% git checkout HEAD~#{$1} {33}",
    "$ (#{numbers})日前の状態に一時的に戻す {33}",
    "% git checkout \"@{#{$1} days ago}\"  {33}",
    "$ (#{numbers})時間前の状態に一時的に戻す {33}",
    "% git checkout \"@{#{$1} hours ago}\"  {33}",
    "$ (#{numbers})分前の状態に一時的に戻す {33}",
    "% git checkout \"@{#{$1} mins ago}\"  {33}",
    "$ 「(#{params})」という文字列を含むファイルを捜す {34}",
    "% git grep '#{$1}' {34}",
    "$ 「(#{params})」という文字列を含むファイルを全履歴から捜す {34}",
    "% git rev-list --all | xargs git grep '#{$1}' {34}",
    "$ ブランチ名を(#{params})に変える {35}",
    "% git branch -m #{$1} {35}",
    "$ ファイルの(編集|修正)のランキングを(#{display}) {38}",
    "$ (よく|頻繁に)(編集|修正)(されてる|されている)ファイルを(#{display}) {38}",
    "$ ファイルの編集頻度を(#{display}) {38}",
    "$ ファイルを編集頻度順にソート {38}",
    "% git log --name-only --pretty=\"format:\" | grep -ve \"^$\" | sort | uniq -c | sort -r {38}",
    "$ (1つ|ひとつ)前のコミットで(削除した|消した)(#{files})を(復元する|元に戻す) {40}",
    "% git checkout $(git rev-list -n 1 HEAD -- #{$2})^ -- #{$2} {40}",
    "$ 現在の状況を(#{display}) {41}",
    "% git status {41}",
    "$ 「(#{files})」というファイルを「(#{params})」という名前に(変更|移動|改名|リネーム)する {42}",
    "% git mv #{$1} #{$2} {42}",
    "$ ファイル「(#{files})」を(#{delete}) {43}",
    "% git rm #{$1} {43}",
    "$ ブランチを(表示|リスト)する {44}",
    "% git branch {44}",
    "$ 「(#{params})」というブランチを作成する {44}",
    "% git branch #{$1} {44}",
    "$ 「(#{params})」というブランチを(#{delete}) {44}",
    "% git branch -d #{$1} {44}",
    "$ 直前のコミットのコメントを修正する {47}",
    "% git commit --amend {47}",
    "$ (#{files})に(#{params})という名前が(出現した|書かれた)のはいつ？ {48}",
    "% git blame #{$1} | grep #{$2} {48}",
    "$ (#{params})という名前が(#{files})に(出現した|書かれた)のはいつ？ {48}",
    "% git blame #{$2} | grep #{$1} {48}",
    "$ これまで追加/削除された行数を表示する {49}",
    "% git log --numstat --pretty=\"%H\" | awk 'NF==3 {plus+=$1; minus+=$2} END {printf(\"+%d, -%d\\\\n\", plus, minus)}' {49}",
    "$ (#{files})に(#{params})という名前が(出現した|書かれた)のはいつ？ {51}",
    "% git blame #{$1} | grep #{$2} {51}",
    "$ ツリー状にログを表示する {52}",
    "% git log --graph --all --format=\"%x09%an%x09%h %d %s\" {52}",
    "$ 最初に「(#{params})」という文字列を含むコミットをした時から現在までに追加されたファイルはどれとどれ？ {53}",
    "% git log --oneline --date=iso-strict --format='%cd %s' | grep #{$1} | tail -1 | awk '{print $1}' | xargs githelp-changed {53}"
  ],
  "pages": [
    "このサイトについて",
    "やりたいことの例",
    "Git情報源",
    "意義",
    "関連文献",
    "gem版の使い方",
    "疑問",
    "Node版GitHelp",
    "特定のファイルの履歴を消す",
    "Glossary",
    "最近の変更を知る",
    "新しい順にファイルを表示",
    "古いファイルとの比較",
    "ブランチのリストを更新日時順に表示する",
    "ファイルを大きい順に表示",
    "ファイルリスト",
    "Reset関連",
    "操作履歴",
    "branches",
    "タグ",
    "ブランチの表示",
    "アイデア",
    "Gitのマニュアルページ",
    "編集中のファイル",
    "レポジトリ",
    "コミットID",
    "コミット",
    "コミットをまとめる",
    "バージョン指定",
    "古いファイル表示",
    "最近編集したファイルのリストを表示する",
    "編集中のファイルをリストする",
    "文字列がはじめて出現したバージョンを捜す",
    "古いバージョンに一時的に戻す",
    "変数や単語が出現しているファイルを捜す",
    "ブランチ名",
    "ユーザ情報",
    "引数パラメタ",
    "ファイルの編集回数のランキング",
    "リモートブランチを消す",
    "ファイル復元",
    "現在の状況",
    "ファイル名変更",
    "ファイル削除",
    "ブランチ",
    "テンプレート",
    "一時的に仕事を退避",
    "コメント修正",
    "文字列の出現を調べる",
    "追加/削除された行数",
    "数字パラメタ",
    "文字列の出現判定",
    "ツリー状にログを表示する",
    "ファイル追加",
    "args",
    "増井俊之"
  ]
}
module.exports = data
